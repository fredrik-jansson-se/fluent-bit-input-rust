/* automatically generated by rust-bindgen 0.59.2 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type time_t = __time_t;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mk_list {
    pub prev: *mut mk_list,
    pub next: *mut mk_list,
}
#[test]
fn bindgen_test_layout_mk_list() {
    assert_eq!(
        ::std::mem::size_of::<mk_list>(),
        16usize,
        concat!("Size of: ", stringify!(mk_list))
    );
    assert_eq!(
        ::std::mem::align_of::<mk_list>(),
        8usize,
        concat!("Alignment of ", stringify!(mk_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_list>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_list>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_list),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mk_event {
    pub fd: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub mask: u32,
    pub status: u8,
    pub data: *mut ::std::os::raw::c_void,
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _head: mk_list,
}
#[test]
fn bindgen_test_layout_mk_event() {
    assert_eq!(
        ::std::mem::size_of::<mk_event>(),
        48usize,
        concat!("Size of: ", stringify!(mk_event))
    );
    assert_eq!(
        ::std::mem::align_of::<mk_event>(),
        8usize,
        concat!("Alignment of ", stringify!(mk_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>())).handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event>()))._head as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mk_event_loop {
    pub size: ::std::os::raw::c_int,
    pub n_events: ::std::os::raw::c_int,
    pub events: *mut mk_event,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mk_event_loop() {
    assert_eq!(
        ::std::mem::size_of::<mk_event_loop>(),
        24usize,
        concat!("Size of: ", stringify!(mk_event_loop))
    );
    assert_eq!(
        ::std::mem::align_of::<mk_event_loop>(),
        8usize,
        concat!("Alignment of ", stringify!(mk_event_loop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event_loop>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event_loop),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event_loop>())).n_events as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event_loop),
            "::",
            stringify!(n_events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event_loop>())).events as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event_loop),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_event_loop>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_event_loop),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mk_rconf {
    pub level: ::std::os::raw::c_int,
    pub created: ::std::os::raw::c_int,
    pub file: *mut ::std::os::raw::c_char,
    pub root_path: *mut ::std::os::raw::c_char,
    pub includes: mk_list,
    pub metas: mk_list,
    pub sections: mk_list,
}
#[test]
fn bindgen_test_layout_mk_rconf() {
    assert_eq!(
        ::std::mem::size_of::<mk_rconf>(),
        72usize,
        concat!("Size of: ", stringify!(mk_rconf))
    );
    assert_eq!(
        ::std::mem::align_of::<mk_rconf>(),
        8usize,
        concat!("Alignment of ", stringify!(mk_rconf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).created as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(created)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).root_path as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(root_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).includes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(includes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).metas as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(metas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mk_rconf>())).sections as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mk_rconf),
            "::",
            stringify!(sections)
        )
    );
}
pub type flb_sds_t = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn flb_input_chunk_append_raw(
        in_: *mut flb_input_instance,
        tag: *const ::std::os::raw::c_char,
        tag_len: size_t,
        buf: *const ::std::os::raw::c_void,
        buf_size: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_task_map {
    pub task: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_flb_task_map() {
    assert_eq!(
        ::std::mem::size_of::<flb_task_map>(),
        8usize,
        concat!("Size of: ", stringify!(flb_task_map))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_task_map>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_task_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_task_map>())).task as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_task_map),
            "::",
            stringify!(task)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_config {
    pub ch_event: mk_event,
    pub support_mode: ::std::os::raw::c_int,
    pub is_ingestion_active: ::std::os::raw::c_int,
    pub is_shutting_down: ::std::os::raw::c_int,
    pub is_running: ::std::os::raw::c_int,
    pub flush: f64,
    pub grace: ::std::os::raw::c_int,
    pub grace_count: ::std::os::raw::c_int,
    pub flush_fd: ::std::os::raw::c_int,
    pub daemon: ::std::os::raw::c_int,
    pub shutdown_fd: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
    pub init_time: time_t,
    pub worker: pthread_t,
    pub ch_data: [::std::os::raw::c_int; 2usize],
    pub ch_manager: [::std::os::raw::c_int; 2usize],
    pub ch_notif: [::std::os::raw::c_int; 2usize],
    pub ch_evl: *mut mk_event_loop,
    pub file: *mut mk_rconf,
    pub program_name: flb_sds_t,
    pub conf_path: *mut ::std::os::raw::c_char,
    pub event_flush: mk_event,
    pub event_shutdown: mk_event,
    pub collectors: mk_list,
    pub dso_plugins: *mut ::std::os::raw::c_void,
    pub custom_plugins: mk_list,
    pub in_plugins: mk_list,
    pub parser_plugins: mk_list,
    pub filter_plugins: mk_list,
    pub out_plugins: mk_list,
    pub customs: mk_list,
    pub inputs: mk_list,
    pub parsers: mk_list,
    pub multiline_parsers: mk_list,
    pub outputs: mk_list,
    pub filters: mk_list,
    pub evl: *mut mk_event_loop,
    pub proxies: mk_list,
    pub kernel: *mut flb_kernel,
    pub log_file: *mut ::std::os::raw::c_char,
    pub log: *mut flb_log,
    pub parsers_file: *mut ::std::os::raw::c_char,
    pub plugins_file: *mut ::std::os::raw::c_char,
    pub env: *mut ::std::os::raw::c_void,
    pub workdir: *mut ::std::os::raw::c_char,
    pub exit_status_code: ::std::os::raw::c_int,
    pub workers: mk_list,
    pub metrics: *mut ::std::os::raw::c_void,
    pub cmetrics: mk_list,
    pub http_server: ::std::os::raw::c_int,
    pub http_port: *mut ::std::os::raw::c_char,
    pub http_listen: *mut ::std::os::raw::c_char,
    pub http_ctx: *mut ::std::os::raw::c_void,
    pub health_check: ::std::os::raw::c_int,
    pub hc_errors_count: ::std::os::raw::c_int,
    pub hc_retry_failure_count: ::std::os::raw::c_int,
    pub health_check_period: ::std::os::raw::c_int,
    pub http_proxy: *mut ::std::os::raw::c_char,
    pub no_proxy: *mut ::std::os::raw::c_char,
    pub dns_mode: *mut ::std::os::raw::c_char,
    pub dns_resolver: *mut ::std::os::raw::c_char,
    pub cio: *mut ::std::os::raw::c_void,
    pub storage_path: *mut ::std::os::raw::c_char,
    pub storage_input_plugin: *mut ::std::os::raw::c_void,
    pub storage_sync: *mut ::std::os::raw::c_char,
    pub storage_metrics: ::std::os::raw::c_int,
    pub storage_checksum: ::std::os::raw::c_int,
    pub storage_max_chunks_up: ::std::os::raw::c_int,
    pub storage_bl_mem_limit: *mut ::std::os::raw::c_char,
    pub storage_metrics_ctx: *mut flb_storage_metrics,
    pub sqldb_list: mk_list,
    pub luajit_list: mk_list,
    pub stream_processor_file: *mut ::std::os::raw::c_char,
    pub stream_processor_ctx: *mut ::std::os::raw::c_void,
    pub stream_processor_tasks: mk_list,
    pub coro_stack_size: ::std::os::raw::c_uint,
    pub upstreams: mk_list,
    pub in_table_id: [u16; 512usize],
    pub sched: *mut ::std::os::raw::c_void,
    pub sched_cap: ::std::os::raw::c_uint,
    pub sched_base: ::std::os::raw::c_uint,
    pub tasks_map: [flb_task_map; 2048usize],
    pub dry_run: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_flb_config() {
    assert_eq!(
        ::std::mem::size_of::<flb_config>(),
        18256usize,
        concat!("Size of: ", stringify!(flb_config))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_config>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).ch_event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(ch_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).support_mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(support_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).is_ingestion_active as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(is_ingestion_active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).is_shutting_down as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(is_shutting_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).is_running as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(is_running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).flush as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).grace as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(grace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).grace_count as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(grace_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).flush_fd as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(flush_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).daemon as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(daemon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).shutdown_fd as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(shutdown_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).verbose as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).init_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(init_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).worker as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(worker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).ch_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(ch_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).ch_manager as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(ch_manager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).ch_notif as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(ch_notif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).ch_evl as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(ch_evl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).file as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).program_name as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(program_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).conf_path as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(conf_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).event_flush as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(event_flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).event_shutdown as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(event_shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).collectors as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(collectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).dso_plugins as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(dso_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).custom_plugins as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(custom_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).in_plugins as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(in_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).parser_plugins as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(parser_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).filter_plugins as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(filter_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).out_plugins as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(out_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).customs as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(customs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).inputs as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).parsers as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(parsers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).multiline_parsers as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(multiline_parsers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).outputs as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).filters as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).evl as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(evl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).proxies as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(proxies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).kernel as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).log_file as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(log_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).log as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).parsers_file as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(parsers_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).plugins_file as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(plugins_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).env as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).workdir as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(workdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).exit_status_code as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(exit_status_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).workers as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).metrics as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).cmetrics as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(cmetrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).http_server as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(http_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).http_port as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(http_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).http_listen as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(http_listen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).http_ctx as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(http_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).health_check as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(health_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).hc_errors_count as *const _ as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(hc_errors_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config>())).hc_retry_failure_count as *const _ as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(hc_retry_failure_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).health_check_period as *const _ as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(health_check_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).http_proxy as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(http_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).no_proxy as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(no_proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).dns_mode as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(dns_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).dns_resolver as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(dns_resolver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).cio as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(cio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_path as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_input_plugin as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_input_plugin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_sync as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_metrics as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_checksum as *const _ as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_checksum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config>())).storage_max_chunks_up as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_max_chunks_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_bl_mem_limit as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_bl_mem_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).storage_metrics_ctx as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(storage_metrics_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).sqldb_list as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(sqldb_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).luajit_list as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(luajit_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config>())).stream_processor_file as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(stream_processor_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).stream_processor_ctx as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(stream_processor_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config>())).stream_processor_tasks as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(stream_processor_tasks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).coro_stack_size as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(coro_stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).upstreams as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(upstreams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).in_table_id as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(in_table_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).sched as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(sched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).sched_cap as *const _ as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(sched_cap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).sched_base as *const _ as usize },
        1860usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(sched_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).tasks_map as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(tasks_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config>())).dry_run as *const _ as usize },
        18248usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config),
            "::",
            stringify!(dry_run)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flb_worker {
    pub event: mk_event,
    pub func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub data: *mut ::std::os::raw::c_void,
    pub tid: pthread_t,
    pub log: [::std::os::raw::c_int; 2usize],
    pub config: *mut ::std::os::raw::c_void,
    pub log_ctx: *mut ::std::os::raw::c_void,
    pub mutex: pthread_mutex_t,
    pub _head: mk_list,
}
#[test]
fn bindgen_test_layout_flb_worker() {
    assert_eq!(
        ::std::mem::size_of::<flb_worker>(),
        152usize,
        concat!("Size of: ", stringify!(flb_worker))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_worker>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_worker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).func as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).tid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).log as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).config as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).log_ctx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(log_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>())).mutex as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_worker>()))._head as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_worker),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flb_log {
    pub event: mk_event,
    pub ch_mng: [::std::os::raw::c_int; 2usize],
    pub type_: u16,
    pub level: u16,
    pub out: *mut ::std::os::raw::c_char,
    pub tid: pthread_t,
    pub worker: *mut flb_worker,
    pub evl: *mut mk_event_loop,
    pub pth_init: ::std::os::raw::c_int,
    pub pth_cond: pthread_cond_t,
    pub pth_mutex: pthread_mutex_t,
}
#[test]
fn bindgen_test_layout_flb_log() {
    assert_eq!(
        ::std::mem::size_of::<flb_log>(),
        192usize,
        concat!("Size of: ", stringify!(flb_log))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_log>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_log))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).ch_mng as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(ch_mng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).type_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).level as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).out as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).tid as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).worker as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(worker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).evl as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(evl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).pth_init as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(pth_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).pth_cond as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(pth_cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_log>())).pth_mutex as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_log),
            "::",
            stringify!(pth_mutex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_uri_field {
    pub length: size_t,
    pub value: *mut ::std::os::raw::c_char,
    pub _head: mk_list,
}
#[test]
fn bindgen_test_layout_flb_uri_field() {
    assert_eq!(
        ::std::mem::size_of::<flb_uri_field>(),
        32usize,
        concat!("Size of: ", stringify!(flb_uri_field))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_uri_field>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_uri_field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri_field>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri_field),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri_field>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri_field),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri_field>()))._head as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri_field),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_uri {
    pub full: *mut ::std::os::raw::c_char,
    pub count: u8,
    pub list: mk_list,
    pub map: *mut flb_uri_field,
}
#[test]
fn bindgen_test_layout_flb_uri() {
    assert_eq!(
        ::std::mem::size_of::<flb_uri>(),
        40usize,
        concat!("Size of: ", stringify!(flb_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_uri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri>())).full as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri),
            "::",
            stringify!(full)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri>())).list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_uri>())).map as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_uri),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_net_host {
    pub ipv6: ::std::os::raw::c_int,
    pub address: flb_sds_t,
    pub port: ::std::os::raw::c_int,
    pub name: flb_sds_t,
    pub listen: flb_sds_t,
    pub uri: *mut flb_uri,
}
#[test]
fn bindgen_test_layout_flb_net_host() {
    assert_eq!(
        ::std::mem::size_of::<flb_net_host>(),
        48usize,
        concat!("Size of: ", stringify!(flb_net_host))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_net_host>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_net_host))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).ipv6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(ipv6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).listen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(listen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_net_host>())).uri as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_net_host),
            "::",
            stringify!(uri)
        )
    );
}
pub type cmt_sds_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmt_labels {
    pub list: mk_list,
}
#[test]
fn bindgen_test_layout_cmt_labels() {
    assert_eq!(
        ::std::mem::size_of::<cmt_labels>(),
        16usize,
        concat!("Size of: ", stringify!(cmt_labels))
    );
    assert_eq!(
        ::std::mem::align_of::<cmt_labels>(),
        8usize,
        concat!("Alignment of ", stringify!(cmt_labels))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_labels>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_labels),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmt {
    pub log_level: ::std::os::raw::c_int,
    pub log_cb: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
            arg5: *const ::std::os::raw::c_char,
        ),
    >,
    pub static_labels: *mut cmt_labels,
    pub counters: mk_list,
    pub gauges: mk_list,
    pub untypeds: mk_list,
    pub histograms: mk_list,
}
#[test]
fn bindgen_test_layout_cmt() {
    assert_eq!(
        ::std::mem::size_of::<cmt>(),
        88usize,
        concat!("Size of: ", stringify!(cmt))
    );
    assert_eq!(
        ::std::mem::align_of::<cmt>(),
        8usize,
        concat!("Alignment of ", stringify!(cmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).log_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).log_cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(log_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).static_labels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(static_labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).counters as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(counters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).gauges as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(gauges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).untypeds as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(untypeds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt>())).histograms as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt),
            "::",
            stringify!(histograms)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmt_opts {
    pub ns: cmt_sds_t,
    pub subsystem: cmt_sds_t,
    pub name: cmt_sds_t,
    pub description: cmt_sds_t,
    pub fqname: cmt_sds_t,
}
#[test]
fn bindgen_test_layout_cmt_opts() {
    assert_eq!(
        ::std::mem::size_of::<cmt_opts>(),
        40usize,
        concat!("Size of: ", stringify!(cmt_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<cmt_opts>(),
        8usize,
        concat!("Alignment of ", stringify!(cmt_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_opts>())).ns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_opts),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_opts>())).subsystem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_opts),
            "::",
            stringify!(subsystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_opts>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_opts),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_opts>())).description as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_opts),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_opts>())).fqname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_opts),
            "::",
            stringify!(fqname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmt_counter {
    pub opts: cmt_opts,
    pub map: *mut cmt_map,
    pub _head: mk_list,
    pub cmt: *mut cmt,
    pub allow_reset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmt_counter() {
    assert_eq!(
        ::std::mem::size_of::<cmt_counter>(),
        80usize,
        concat!("Size of: ", stringify!(cmt_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<cmt_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(cmt_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_counter>())).opts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_counter),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_counter>())).map as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_counter),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_counter>()))._head as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_counter),
            "::",
            stringify!(_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_counter>())).cmt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_counter),
            "::",
            stringify!(cmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmt_counter>())).allow_reset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmt_counter),
            "::",
            stringify!(allow_reset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_metrics {
    pub title_len: ::std::os::raw::c_int,
    pub title: [::std::os::raw::c_char; 64usize],
    pub count: ::std::os::raw::c_int,
    pub list: mk_list,
}
#[test]
fn bindgen_test_layout_flb_metrics() {
    assert_eq!(
        ::std::mem::size_of::<flb_metrics>(),
        88usize,
        concat!("Size of: ", stringify!(flb_metrics))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_metrics>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_metrics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_metrics>())).title_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_metrics),
            "::",
            stringify!(title_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_metrics>())).title as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_metrics),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_metrics>())).count as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_metrics),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_metrics>())).list as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_metrics),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flb_config_map_val {
    pub val: flb_config_map_val__bindgen_ty_1,
    pub mult: *mut mk_list,
    pub _head: mk_list,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flb_config_map_val__bindgen_ty_1 {
    pub i_num: ::std::os::raw::c_int,
    pub boolean: ::std::os::raw::c_char,
    pub d_num: f64,
    pub s_num: size_t,
    pub str_: flb_sds_t,
    pub list: *mut mk_list,
}
#[test]
fn bindgen_test_layout_flb_config_map_val__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<flb_config_map_val__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(flb_config_map_val__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_config_map_val__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(flb_config_map_val__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).i_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(i_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).boolean as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).d_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(d_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).s_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(s_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).str_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_config_map_val__bindgen_ty_1>())).list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val__bindgen_ty_1),
            "::",
            stringify!(list)
        )
    );
}
#[test]
fn bindgen_test_layout_flb_config_map_val() {
    assert_eq!(
        ::std::mem::size_of::<flb_config_map_val>(),
        32usize,
        concat!("Size of: ", stringify!(flb_config_map_val))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_config_map_val>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_config_map_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map_val>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map_val>())).mult as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val),
            "::",
            stringify!(mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map_val>()))._head as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map_val),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flb_config_map {
    pub type_: ::std::os::raw::c_int,
    pub name: flb_sds_t,
    pub def_value: flb_sds_t,
    pub flags: ::std::os::raw::c_int,
    pub set_property: ::std::os::raw::c_int,
    pub offset: usize,
    pub desc: flb_sds_t,
    pub value: flb_config_map_val,
    pub _head: mk_list,
}
#[test]
fn bindgen_test_layout_flb_config_map() {
    assert_eq!(
        ::std::mem::size_of::<flb_config_map>(),
        96usize,
        concat!("Size of: ", stringify!(flb_config_map))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_config_map>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_config_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).def_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(def_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).set_property as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(set_property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).desc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>())).value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_config_map>()))._head as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_config_map),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_hash_table {
    pub count: ::std::os::raw::c_int,
    pub chains: mk_list,
}
#[test]
fn bindgen_test_layout_flb_hash_table() {
    assert_eq!(
        ::std::mem::size_of::<flb_hash_table>(),
        24usize,
        concat!("Size of: ", stringify!(flb_hash_table))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_hash_table>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_hash_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash_table>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash_table),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash_table>())).chains as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash_table),
            "::",
            stringify!(chains)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_hash {
    pub evict_mode: ::std::os::raw::c_int,
    pub max_entries: ::std::os::raw::c_int,
    pub total_count: ::std::os::raw::c_int,
    pub cache_ttl: ::std::os::raw::c_int,
    pub size: size_t,
    pub entries: mk_list,
    pub table: *mut flb_hash_table,
}
#[test]
fn bindgen_test_layout_flb_hash() {
    assert_eq!(
        ::std::mem::size_of::<flb_hash>(),
        48usize,
        concat!("Size of: ", stringify!(flb_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).evict_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(evict_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).max_entries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(max_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).total_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).cache_ttl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(cache_ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_hash>())).table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_hash),
            "::",
            stringify!(table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_input_plugin {
    pub flags: ::std::os::raw::c_int,
    pub event_type: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub config_map: *mut flb_config_map,
    pub cb_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut flb_input_instance,
            arg2: *mut flb_config,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_pre_run: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut flb_input_instance,
            arg2: *mut flb_config,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_collect: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut flb_input_instance,
            arg2: *mut flb_config,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_flush_buf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub cb_flush_end:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub cb_pause: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut flb_config),
    >,
    pub cb_resume: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut flb_config),
    >,
    pub cb_ingest: ::std::option::Option<
        unsafe extern "C" fn(
            in_context: *mut ::std::os::raw::c_void,
            arg1: *mut ::std::os::raw::c_void,
            arg2: size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_exit: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut flb_config,
        ) -> ::std::os::raw::c_int,
    >,
    pub instance: *mut ::std::os::raw::c_void,
    pub _head: mk_list,
}
#[test]
fn bindgen_test_layout_flb_input_plugin() {
    assert_eq!(
        ::std::mem::size_of::<flb_input_plugin>(),
        128usize,
        concat!("Size of: ", stringify!(flb_input_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_input_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_input_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).event_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).config_map as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(config_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_init as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_pre_run as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_pre_run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_collect as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_collect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_flush_buf as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_flush_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_flush_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_flush_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_pause as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_pause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_resume as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_resume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_ingest as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_ingest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).cb_exit as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(cb_exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>())).instance as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_plugin>()))._head as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_plugin),
            "::",
            stringify!(_head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_input_instance {
    pub event_type: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub log_level: ::std::os::raw::c_int,
    pub channel: [::std::os::raw::c_int; 2usize],
    pub threaded: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 32usize],
    pub alias: *mut ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_void,
    pub p: *mut flb_input_plugin,
    pub tag: *mut ::std::os::raw::c_char,
    pub tag_len: ::std::os::raw::c_int,
    pub routable: ::std::os::raw::c_int,
    pub storage_pause_on_chunks_overlimit: ::std::os::raw::c_int,
    pub host: flb_net_host,
    pub storage: *mut ::std::os::raw::c_void,
    pub storage_type: ::std::os::raw::c_int,
    pub mem_chunks_size: size_t,
    pub mp_total_buf_size: size_t,
    pub mem_buf_limit: size_t,
    pub mem_buf_status: ::std::os::raw::c_int,
    pub storage_buf_status: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub config_map: *mut mk_list,
    pub _head: mk_list,
    pub routes_direct: mk_list,
    pub routes: mk_list,
    pub properties: mk_list,
    pub collectors: mk_list,
    pub chunks: mk_list,
    pub chunks_up: mk_list,
    pub chunks_down: mk_list,
    pub tasks: mk_list,
    pub coros: mk_list,
    pub metrics: *mut flb_metrics,
    pub cmt: *mut cmt,
    pub cmt_bytes: *mut cmt_counter,
    pub cmt_records: *mut cmt_counter,
    pub ht_log_chunks: *mut flb_hash,
    pub ht_metric_chunks: *mut flb_hash,
    pub config: *mut flb_config,
}
#[test]
fn bindgen_test_layout_flb_input_instance() {
    assert_eq!(
        ::std::mem::size_of::<flb_input_instance>(),
        440usize,
        concat!("Size of: ", stringify!(flb_input_instance))
    );
    assert_eq!(
        ::std::mem::align_of::<flb_input_instance>(),
        8usize,
        concat!("Alignment of ", stringify!(flb_input_instance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).event_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).log_level as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).channel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).threaded as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(threaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).name as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).alias as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).context as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).p as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).tag as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).tag_len as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(tag_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).routable as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(routable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).storage_pause_on_chunks_overlimit
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(storage_pause_on_chunks_overlimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).host as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).storage as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).storage_type as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(storage_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).mem_chunks_size as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(mem_chunks_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).mp_total_buf_size as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(mp_total_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).mem_buf_limit as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(mem_buf_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).mem_buf_status as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(mem_buf_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).storage_buf_status as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(storage_buf_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).data as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).config_map as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(config_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>()))._head as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(_head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).routes_direct as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(routes_direct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).routes as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(routes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).properties as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).collectors as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(collectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).chunks as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(chunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).chunks_up as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(chunks_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).chunks_down as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(chunks_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).tasks as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(tasks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).coros as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(coros)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).metrics as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).cmt as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(cmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).cmt_bytes as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(cmt_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).cmt_records as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(cmt_records)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).ht_log_chunks as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(ht_log_chunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flb_input_instance>())).ht_metric_chunks as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(ht_metric_chunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flb_input_instance>())).config as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(flb_input_instance),
            "::",
            stringify!(config)
        )
    );
}
extern "C" {
    pub fn flb_input_get_property(
        key: *const ::std::os::raw::c_char,
        ins: *mut flb_input_instance,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn flb_input_set_context(
        ins: *mut flb_input_instance,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn flb_input_set_collector_time(
        ins: *mut flb_input_instance,
        cb_collect: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut flb_input_instance,
                arg2: *mut flb_config,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        seconds: time_t,
        nanoseconds: ::std::os::raw::c_long,
        config: *mut flb_config,
    ) -> ::std::os::raw::c_int;
}
pub const flb_loglevel_helper_LOG_LVL_OFF: flb_loglevel_helper = 0;
pub const flb_loglevel_helper_LOG_LVL_ERROR: flb_loglevel_helper = 1;
pub const flb_loglevel_helper_LOG_LVL_WARN: flb_loglevel_helper = 2;
pub const flb_loglevel_helper_LOG_LVL_INFO: flb_loglevel_helper = 3;
pub const flb_loglevel_helper_LOG_LVL_DEBUG: flb_loglevel_helper = 4;
pub const flb_loglevel_helper_LOG_LVL_TRACE: flb_loglevel_helper = 5;
pub type flb_loglevel_helper = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_kernel {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flb_storage_metrics {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmt_map {
    pub _address: u8,
}
